/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import modelo.Conversor.Binario;
import modelo.Conversor.Decimal;
import modelo.Conversor.IEEE754;

/**
 *
 * @author salas
 */
public class EstandarIEEE754 extends javax.swing.JFrame {

    /**
     * Creates new form Evaluador
     */
    public EstandarIEEE754() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelEvaluador = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtInputBinario = new javax.swing.JTextField();
        txtInputDecimal = new javax.swing.JTextField();
        txtSigno32 = new javax.swing.JTextField();
        txtExponente32 = new javax.swing.JTextField();
        txtMantisa32 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtSigno64 = new javax.swing.JTextField();
        txtExponente64 = new javax.swing.JTextField();
        txtMantisa64 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnConvertir = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Estandar IEEE754");

        panelEvaluador.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Decimal:");
        panelEvaluador.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, -1, -1));

        jLabel2.setText("Binario:");
        panelEvaluador.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, -1, -1));

        jLabel3.setText("Número");
        panelEvaluador.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, -1, -1));

        txtInputBinario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInputBinarioKeyTyped(evt);
            }
        });
        panelEvaluador.add(txtInputBinario, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, 410, -1));

        txtInputDecimal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInputDecimalKeyTyped(evt);
            }
        });
        panelEvaluador.add(txtInputDecimal, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 410, -1));

        txtSigno32.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSigno32KeyTyped(evt);
            }
        });
        panelEvaluador.add(txtSigno32, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 30, -1));

        txtExponente32.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtExponente32KeyTyped(evt);
            }
        });
        panelEvaluador.add(txtExponente32, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, 110, -1));

        txtMantisa32.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMantisa32KeyTyped(evt);
            }
        });
        panelEvaluador.add(txtMantisa32, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 170, 280, -1));

        jLabel4.setText("64 bits:");
        panelEvaluador.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 40, 20));

        jLabel5.setText("signo");
        panelEvaluador.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, -1, -1));

        jLabel6.setText("exponente");
        panelEvaluador.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, -1, -1));

        jLabel7.setText("mantisa");
        panelEvaluador.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 200, -1, -1));

        jLabel8.setText("32 bits:");
        panelEvaluador.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 40, 20));

        txtSigno64.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSigno64KeyTyped(evt);
            }
        });
        panelEvaluador.add(txtSigno64, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 250, 30, -1));

        txtExponente64.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtExponente64KeyTyped(evt);
            }
        });
        panelEvaluador.add(txtExponente64, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, 110, -1));

        txtMantisa64.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMantisa64KeyTyped(evt);
            }
        });
        panelEvaluador.add(txtMantisa64, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 250, 280, -1));

        jLabel9.setText("signo");
        panelEvaluador.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, -1, -1));

        jLabel10.setText("exponente");
        panelEvaluador.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 280, -1, -1));

        jLabel11.setText("mantisa");
        panelEvaluador.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 280, -1, -1));

        jLabel12.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel12.setText("IEE754");
        panelEvaluador.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, 80, 30));

        btnConvertir.setText("Convertir");
        btnConvertir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertirActionPerformed(evt);
            }
        });
        panelEvaluador.add(btnConvertir, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, -1, -1));

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        panelEvaluador.add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 320, -1, -1));

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        panelEvaluador.add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 320, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelEvaluador, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelEvaluador, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //método que limpiar las cajas de texto de la interfaz
    private void limpiar() {
        txtExponente32.setText("");
        txtExponente64.setText("");
        txtInputBinario.setText("");
        txtInputDecimal.setText("");
        txtMantisa32.setText("");
        txtMantisa64.setText("");
        txtSigno32.setText("");
        txtSigno64.setText("");
        txtInputDecimal.setEditable(true);
        txtInputBinario.setEditable(true);
        txtExponente32.setEditable(true);
        txtExponente64.setEditable(true);
        txtSigno32.setEditable(true);
        txtSigno64.setEditable(true);
        txtMantisa32.setEditable(true);
        txtMantisa64.setEditable(true);
        btnConvertir.setEnabled(true);
    }

    //-------------------------------------
    //
    private boolean hayPuntos(String txt) {
        return txt.contains(".");
    }
    //--------------------------

    private void convertir(IEEE754 f) {
        String exp32 = f.exponente32();
        String exp64 = f.exponente64();

        while (exp32.length() != 8) {
            exp32 = "0" + exp32;
        }
        while (exp64.length() != 11) {
            exp64 = "0" + exp64;
        }
        txtSigno32.setText(f.getSigno());
        txtSigno64.setText(f.getSigno());
        txtExponente32.setText(exp32);
        txtExponente64.setText(exp64);
        txtMantisa32.setText(f.getMantisa32());
        txtMantisa64.setText(f.getMantisa64());

    }

    private void desabilitar() {
        txtInputDecimal.setEditable(false);
        txtInputBinario.setEditable(false);
        txtExponente32.setEditable(false);
        txtExponente64.setEditable(false);
        txtSigno32.setEditable(false);
        txtSigno64.setEditable(false);
        txtMantisa32.setEditable(false);
        txtMantisa64.setEditable(false);
        btnConvertir.setEnabled(false);

    }


    private void btnConvertirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertirActionPerformed
        if (!(txtInputDecimal.getText().isEmpty() && txtInputBinario.getText().isEmpty())) {
            IEEE754 f;
            Decimal d = new Decimal();
            if (!txtInputDecimal.getText().isEmpty() && !txtInputDecimal.getText().equals(".")) {
                String bin = d.cambiarABase(txtInputDecimal.getText(), 2, 100);
                f = new IEEE754(bin);

                convertir(f);
                desabilitar();
                txtInputBinario.setText(bin);
            } else {
                if (!txtInputBinario.getText().isEmpty() && !txtInputBinario.getText().equals(".")) {
                    f = new IEEE754(txtInputBinario.getText());

                    convertir(f);
                    desabilitar();
                    txtInputDecimal.setText(d.aDecimal(txtInputBinario.getText(), 2));
                }
            }

        } else {
            IEEE754 f = new IEEE754();
            StringBuilder sBin, sDec;
            sBin = new StringBuilder();
            sDec = new StringBuilder();
            if (!(txtSigno32.getText().isEmpty()
                    && txtMantisa32.getText().isEmpty()
                    && txtExponente32.getText().isEmpty())) {
                if (txtMantisa32.getText().length() < 23 || txtExponente32.getText().length() < 8) {
                    JOptionPane.showMessageDialog(this, "Asegurese de llenar los 8 bits en el exponente y los 23 bits en la mantisa!", "Error :(", JOptionPane.ERROR_MESSAGE);
                } else {
                    if (txtSigno32.getText().equals("1")) {
                        sBin.append("-");
                        sDec.append("-");
                    }
                    sBin.append(f.getBinario(txtExponente32.getText(), txtMantisa32.getText()));
                    sDec.append(f.getNumeroDecimal(txtExponente32.getText(), txtMantisa32.getText()));
                    txtInputBinario.setText(sBin.toString());
                    txtInputDecimal.setText(sDec.toString());
                    desabilitar();
                }
            } else {
                if (!(txtSigno64.getText().isEmpty()
                        && txtMantisa64.getText().isEmpty()
                        && txtExponente64.getText().isEmpty())) {
                    if (txtMantisa64.getText().length() < 52 || txtExponente64.getText().length() < 11) {
                        JOptionPane.showMessageDialog(this, "Asegurese de llenar los 11 bits en el exponente y los 52 bits en la mantisa!", "Error :(", JOptionPane.ERROR_MESSAGE);
                    } else {
                        if (txtSigno64.getText().equals("1")) {
                            sBin.append("-");
                            sDec.append("-");
                        }
                        sBin.append(f.getBinario(txtExponente64.getText(), txtMantisa64.getText()));
                        sDec.append(f.getNumeroDecimal(txtExponente64.getText(), txtMantisa64.getText()));
                        txtInputBinario.setText(sBin.toString());
                        txtInputDecimal.setText(sDec.toString());
                        desabilitar();
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Asegurese de llenar los campos correspondientes!", "Error :(", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnConvertirActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void txtInputDecimalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInputDecimalKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c)
                || (c == KeyEvent.VK_BACK_SPACE)
                || (c == KeyEvent.VK_DELETE)
                || (c == KeyEvent.VK_PERIOD)
                || (c == KeyEvent.VK_MINUS))) {
            getToolkit().beep();
            evt.consume();

        }
        if (c == KeyEvent.VK_PERIOD && hayPuntos(txtInputDecimal.getText())) {
            getToolkit().beep();
            evt.consume();
        }

        if (c == KeyEvent.VK_MINUS && txtInputDecimal.getText().contains("-")) {
            getToolkit().beep();
            evt.consume();
        }

        if (hayPuntos(txtInputDecimal.getText()) && txtInputDecimal.getText().length() == 1) {
            txtInputDecimal.setText("0" + txtInputDecimal.getText());
        }
    }//GEN-LAST:event_txtInputDecimalKeyTyped

    private void txtInputBinarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInputBinarioKeyTyped
        char c = evt.getKeyChar();
        if (!(c == KeyEvent.VK_1 || c == KeyEvent.VK_0
                || (c == KeyEvent.VK_BACK_SPACE)
                || (c == KeyEvent.VK_DELETE)
                || (c == KeyEvent.VK_PERIOD)
                || (c == KeyEvent.VK_MINUS))) {

            getToolkit().beep();
            evt.consume();
        }
        if (c == KeyEvent.VK_PERIOD && hayPuntos(txtInputBinario.getText())) {
            getToolkit().beep();
            evt.consume();
        }
        if (c == KeyEvent.VK_MINUS && txtInputBinario.getText().contains("-")) {
            getToolkit().beep();
            evt.consume();
        }

        if (hayPuntos(txtInputBinario.getText()) && txtInputBinario.getText().length() == 1) {
            txtInputBinario.setText("0" + txtInputBinario.getText());
        }
    }//GEN-LAST:event_txtInputBinarioKeyTyped

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void txtSigno32KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSigno32KeyTyped
        char c = evt.getKeyChar();
        if (!(c == KeyEvent.VK_1 || c == KeyEvent.VK_0
                || (c == KeyEvent.VK_BACK_SPACE)
                || (c == KeyEvent.VK_DELETE))
                || !txtSigno32.getText().isEmpty()) {

            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtSigno32KeyTyped

    private void txtSigno64KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSigno64KeyTyped
        char c = evt.getKeyChar();
        if (!(c == KeyEvent.VK_1 || c == KeyEvent.VK_0
                || (c == KeyEvent.VK_BACK_SPACE)
                || (c == KeyEvent.VK_DELETE))
                || !txtSigno64.getText().isEmpty()) {

            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtSigno64KeyTyped

    private void txtExponente32KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtExponente32KeyTyped
        char c = evt.getKeyChar();
        if (!(c == KeyEvent.VK_1 || c == KeyEvent.VK_0
                || (c == KeyEvent.VK_BACK_SPACE)
                || (c == KeyEvent.VK_DELETE))
                || txtExponente32.getText().length() >= 8) {

            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtExponente32KeyTyped

    private void txtExponente64KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtExponente64KeyTyped
        char c = evt.getKeyChar();
        if (!(c == KeyEvent.VK_1 || c == KeyEvent.VK_0
                || (c == KeyEvent.VK_BACK_SPACE)
                || (c == KeyEvent.VK_DELETE))
                || txtExponente64.getText().length() >= 11) {

            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtExponente64KeyTyped

    private void txtMantisa32KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMantisa32KeyTyped
        char c = evt.getKeyChar();
        if (!(c == KeyEvent.VK_1 || c == KeyEvent.VK_0
                || (c == KeyEvent.VK_BACK_SPACE)
                || (c == KeyEvent.VK_DELETE))
                || txtMantisa32.getText().length() >= 23) {

            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtMantisa32KeyTyped

    private void txtMantisa64KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMantisa64KeyTyped
        char c = evt.getKeyChar();
        if (!(c == KeyEvent.VK_1 || c == KeyEvent.VK_0
                || (c == KeyEvent.VK_BACK_SPACE)
                || (c == KeyEvent.VK_DELETE))
                || txtMantisa64.getText().length() >= 52) {

            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtMantisa64KeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConvertir;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel panelEvaluador;
    private javax.swing.JTextField txtExponente32;
    private javax.swing.JTextField txtExponente64;
    private javax.swing.JTextField txtInputBinario;
    private javax.swing.JTextField txtInputDecimal;
    private javax.swing.JTextField txtMantisa32;
    private javax.swing.JTextField txtMantisa64;
    private javax.swing.JTextField txtSigno32;
    private javax.swing.JTextField txtSigno64;
    // End of variables declaration//GEN-END:variables
    private Binario binario;

}
